Requirements:
Terraform
Helm chart
AWS cloud provider

Procedures:
TERRAFORM
terraform init
terraform plan
terraform apply

K8s
aws eks update-kubeconfig --name=eks-socks-shop --region=us-east-1
kubectl describe nodes
kubectl create namespace sock-shop
kubectl get ns
kubectl config set-context --current --namespace=sock-shop
Deploy: kubectl create -f complete-deploy.yaml
kubectl get pods
kubectl get svc
kubectl get all -A
kubectl port-forward service/front-end -n sock-shop 30001:80

HELM INSTALL
Documentation: https://helm.sh/docs/intro/install/
check version: helm version




INGRESS
Documentation: https://artifacthub.io/packages/helm/ingress-nginx/ingress-nginx
Get Repo Info:
helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
helm repo update

Search & Check for ingress repo:
helm repo ls
helm search repo [name]

Install Ingress chart:
helm install ingress ingress-nginx/ingress-nginx

Apply Ingress File
kubectl apply -f ingress.yaml 
kubect get ingress



MONITORING- (PROM)
Documentation: https://github.com/prometheus-community/helm-charts 
helm repo add prometheus https://prometheus-community.github.io/helm-charts
helm search repo promethus
#------helm install promethus promethus/kube-promethus-stack
----------------look at the steps below ignore the above prom-steps
kubectl create -f 00-monitoring-ns.yaml
kubectl apply $(ls *-prometheus-*.yaml | awk ' { print " -f " $1 } ')
Expose: kubectl port-forward service/prometheus 31090:9090 -n monitoring

PLAN B
SETUP
Step 1: Add the Prometheus Helm Repository
First, add the Prometheus Helm repository.
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm repo update

Step 2: Install Prometheus
Use the following command to install Prometheus with Helm:
helm install prometheus prometheus-community/prometheus
This command installs Prometheus with the default configuration. You can customize the installation by specifying additional parameters or a custom values file.

Step 3: Verify the Installation
Check the status of your Helm release to verify that Prometheus has been installed successfully.
helm status prometheus

Step 4: Access Prometheus
Prometheus should now be running in your Kubernetes cluster. To access Prometheus, you can use port forwarding to forward a port on your local machine to the Prometheus service.

kubectl port-forward deploy/prometheus-server 9090
Now, you can access Prometheus by opening your web browser and navigating to http://localhost:9090.

STEPS CONTINUE


GRAFANA
kubectl apply $(ls *-grafana-*.yaml | awk ' { print " -f " $1 }'  | grep -v grafana-import)
kubectl apply -f 23-grafana-import-dash-batch.yaml
kubectl port-forward service/grafana 31300:3000 -n monitoring
kubectl port-forward svc/grafana 31300:80 -n monitoring
username: admin
password: prom-operator

To get grafana username & Pwd

kubectl describe pod <grafana-pod-name> -n <namespace>

kubectl get secret prometheus-grafana -n <namespace> -o jsonpath="{.data.admin-user}" | base64 --decode
kubectl get secret prometheus-grafana -n <namespace> -o jsonpath="{.data.admin-password}" | base64 --decode




LOGGING


LETS-ENCRYPT

Apply this: 
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml

configure the files

then follow these steps for execution

Steps involved

-Apply your ingress configurations first: kubectl apply -f ingress.yaml
-Then apply your issuer next: kubectl apply -f issuer.yaml
-Then apply your certificate: kubectl apply -f cert.yaml
-verify if cert is issued: kubectl get certificate -n sock-shop [letsencrypt-prod, ]


documentation: https://cert-manager.io/docs/installation/helm/
Add repo: helm repo add jetstack https://charts.jetstack.io --force-update
update: helm repo update

install:
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.15.2 \
  --set crds.enabled=true

list repo: helm repo ls
helm search repo jetstack
#helm show values jetstack/cert-manager




WORK FLOW

Step 1
Deploy Terraform code for eks

Step 2
Deploy microservice application 

Step 3
Deploy  lets encrypt
helm repo add jetstack https://charts.jetstack.io --force-update
helm repo update 
helm install \
  cert-manager jetstack/cert-manager \
  --namespace cert-manager \
  --create-namespace \
  --version v1.15.2 \
  --set crds.enabled=true

Deploy your cluster issuer or issuer

Step 4
Deploy Prometheus 
(Depends on the one you want to use) 
You could use the one from the micro service repo
Or the one from helm 

Step 5
Deploy ingress
helm repo add nginx https://kubernetes.github.io/ingress-nginx
helm repo update 
helm install nginx nginx/ingress-nginx --namespace sock-shop
helm install ingress ./ingress-chart 

Step 6 
Write CI/CD












TERRAFORM

[main.tf]

# Copyright (c) HashiCorp, Inc.
provider "aws" {
  region = var.region
}

module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"

  name = "SockShop-vpc"

  cidr = "10.0.0.0/16"
  azs  = ["us-east-1a", "us-east-1b"]

  private_subnets = ["10.0.1.0/24", "10.0.2.0/24",]
  public_subnets  = ["10.0.4.0/24", "10.0.5.0/24",]

  enable_nat_gateway   = true
  single_nat_gateway   = true
  enable_dns_hostnames = true

  tags = {
    Terraform = "true"
    Environment = "dev"
  }
}

module "eks" {
  source  = "terraform-aws-modules/eks/aws"
  version = "~> 20.0"

  cluster_name    = "SockShop"
  cluster_version = "1.30"

  cluster_endpoint_public_access  = true


  vpc_id                   = module.vpc.vpc_id
  subnet_ids               = module.vpc.private_subnets
  

  # EKS Managed Node Group(s)
  eks_managed_node_group_defaults = {
  ami_type =  "AL2_x86_64"
  }

  eks_managed_node_groups = {
     one = {
      name = "node-group-1"
      # Starting on 1.30, AL2023 is the default AMI type for EKS managed node groups
      
      instance_types = ["t3.medium"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }

      two = {
      name = "node-group-2"
      
      instance_types = ["t3.medium"]

      min_size     = 1
      max_size     = 2
      desired_size = 2
    }
  }

  # Cluster access entry
  # To add the current caller identity as an administrator
  enable_cluster_creator_admin_permissions = true
}


[variable.tf]

variable "region" {
  description = "AWS region"
  type        = string
  default     = "us-east-1"
}
 



--
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
# namespace: cert-manager
spec:
  acme:
    server: https://acme-v02.api.letsencrypt.org/directory  
    email: victorojetokun24@gmail.com
    privateKeySecretRef:
      name: vikode-secret     
    solvers:
      - selector: {}
        http01:
          ingress:
            class: nginx       



apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: vikode-certificate
  namespace: sock-shop
spec:
  secretName: vikode-secret
  issuerRef: 
    name: letsencrypt-prod
    kind: ClusterIssuer
  commonName: www.vikode.me
  dnsNames:
  - www.vikode.me

correct the above cert.yml and issuer.yml and point out what wrong what wron with the two scripts

install: kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.15.2/cert-manager.yaml
 kubectl get certificate -n sock-shop
 kubectl apply -f issuer.yaml
 kubectl apply -f cert.yaml
 kubectl delete secret vikode-secret -n sock-shop
 kubectl get secret -n sock-shop
 kubectl delete certificate vikode-cert -n sock-shop
 kubectl get certificates -n sock-shop -o wide
 kubectl describe certificate vikode-certificate -n sock-shop

 helm: pro/grafana
 helm upgrade sock-shop --namespace sock-shop ./sock-shop
 helm search repo prometheus
 helm install prometheus prometheus/kube-prometheus-stack
 helm repo update

install inginx controller: helm install ingress ingress-nginx/ingress-nginx
 kubectl port-forward service/front-end -n sock-shop 30001:80

 helm install sock-shop ./sock-shop/ --namespace=sock-shop  
  helm create sock-shop
  kubectl config set-context --current --namespace=sock-shop
  kubectl create namespace sock-shop
  aws eks update-kubeconfig --name=eks-Socks-Shop --region=us-east-1
  aws eks list-clusters --region us-east-1

